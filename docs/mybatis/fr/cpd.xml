<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="45" tokens="231">
<file line="28" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/type/ClobTypeHandler.java"/>
<file line="28" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/type/NClobTypeHandler.java"/>
<codefragment>
<![CDATA[
public class ClobTypeHandler extends BaseTypeHandler<String> {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)
      throws SQLException {
    StringReader reader = new StringReader(parameter);
    ps.setCharacterStream(i, reader, parameter.length());
  }

  @Override
  public String getNullableResult(ResultSet rs, String columnName)
      throws SQLException {
    String value = "";
    Clob clob = rs.getClob(columnName);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }

  @Override
  public String getNullableResult(ResultSet rs, int columnIndex)
      throws SQLException {
    String value = "";
    Clob clob = rs.getClob(columnIndex);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }

  @Override
  public String getNullableResult(CallableStatement cs, int columnIndex)
      throws SQLException {
    String value = "";
    Clob clob = cs.getClob(columnIndex);
    if (clob != null) {
      int size = (int) clob.length();
      value = clob.getSubString(1, size);
    }
    return value;
  }
}
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="212">
<file line="45" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/jdbc/SelectBuilder.java"/>
<file line="72" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/jdbc/SqlBuilder.java"/>
<codefragment>
<![CDATA[
    sql().SELECT_DISTINCT(columns);
  }

  public static void FROM(String table) {
    sql().FROM(table);
  }

  public static void JOIN(String join) {
    sql().JOIN(join);
  }

  public static void INNER_JOIN(String join) {
    sql().INNER_JOIN(join);
  }

  public static void LEFT_OUTER_JOIN(String join) {
    sql().LEFT_OUTER_JOIN(join);
  }

  public static void RIGHT_OUTER_JOIN(String join) {
    sql().RIGHT_OUTER_JOIN(join);
  }

  public static void OUTER_JOIN(String join) {
    sql().OUTER_JOIN(join);
  }

  public static void WHERE(String conditions) {
    sql().WHERE(conditions);
  }

  public static void OR() {
    sql().OR();
  }

  public static void AND() {
    sql().AND();
  }

  public static void GROUP_BY(String columns) {
    sql().GROUP_BY(columns);
  }

  public static void HAVING(String conditions) {
    sql().HAVING(conditions);
  }

  public static void ORDER_BY(String columns) {
    sql().ORDER_BY(columns);
  }
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="206">
<file line="95" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java"/>
<file line="97" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
  private static class EnhancedResultObjectProxyImpl implements MethodInterceptor {

    private Class<?> type;
    private ResultLoaderMap lazyLoader;
    private boolean aggressive;
    private Set<String> lazyLoadTriggerMethods;
    private ObjectFactory objectFactory;
    private List<Class<?>> constructorArgTypes;
    private List<Object> constructorArgs;

    private EnhancedResultObjectProxyImpl(Class<?> type, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      this.type = type;
      this.lazyLoader = lazyLoader;
      this.aggressive = configuration.isAggressiveLazyLoading();
      this.lazyLoadTriggerMethods = configuration.getLazyLoadTriggerMethods();
      this.objectFactory = objectFactory;
      this.constructorArgTypes = constructorArgTypes;
      this.constructorArgs = constructorArgs;
    }

    public static Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      final Class<?> type = target.getClass();
      EnhancedResultObjectProxyImpl callback = new EnhancedResultObjectProxyImpl(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
      PropertyCopier.copyBeanProperties(type, target, enhanced);
      return enhanced;
    }

    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="147">
<file line="160" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java"/>
<file line="162" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
  private static class EnhancedDeserializationProxyImpl extends AbstractEnhancedDeserializationProxy implements MethodInterceptor {

    private EnhancedDeserializationProxyImpl(Class<?> type, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,
            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      super(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
    }

    public static Object createProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory,
            List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
      final Class<?> type = target.getClass();
      EnhancedDeserializationProxyImpl callback = new EnhancedDeserializationProxyImpl(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
      Object enhanced = crateProxy(type, callback, constructorArgTypes, constructorArgs);
      PropertyCopier.copyBeanProperties(type, target, enhanced);
      return enhanced;
    }

    @Override
    public Object intercept(Object enhanced, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="127">
<file line="56" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java"/>
<file line="55" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
      throw new IllegalStateException("Cannot enable lazy loading because CGLIB is not available. Add CGLIB to your classpath.", e);
    }
  }

  public Object createProxy(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
    return EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);
  }

  public Object createDeserializationProxy(Object target, Map<String, ResultLoaderMap.LoadPair> unloadedProperties, ObjectFactory objectFactory, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
    return EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);
  }

  public void setProperties(Properties properties) {
  }

  private static Object crateProxy(Class<?> type, Callback callback, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="119">
<file line="173" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/BaseExecutor.java"/>
<file line="63" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/scripting/defaults/DefaultParameterHandler.java"/>
<codefragment>
<![CDATA[
    for (int i = 0; i < parameterMappings.size(); i++) { // mimic DefaultParameterHandler logic
      ParameterMapping parameterMapping = parameterMappings.get(i);
      if (parameterMapping.getMode() != ParameterMode.OUT) {
        Object value;
        String propertyName = parameterMapping.getProperty();
        if (boundSql.hasAdditionalParameter(propertyName)) {
          value = boundSql.getAdditionalParameter(propertyName);
        } else if (parameterObject == null) {
          value = null;
        } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
          value = parameterObject;
        } else {
          MetaObject metaObject = configuration.newMetaObject(parameterObject);
          value = metaObject.getValue(propertyName);
        }
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="109">
<file line="29" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java"/>
<file line="49" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java"/>
<codefragment>
<![CDATA[
    log = LogFactory.getLog(clazz);
  }

  public boolean isDebugEnabled() {
    return log.isDebugEnabled();
  }

  public boolean isTraceEnabled() {
    return log.isTraceEnabled();
  }

  public void error(String s, Throwable e) {
    log.error(s, e);
  }

  public void error(String s) {
    log.error(s);
  }

  public void debug(String s) {
    log.debug(s);
  }

  public void trace(String s) {
    log.trace(s);
  }

  public void warn(String s) {
    log.warn(s);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="108">
<file line="37" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/cache/decorators/SoftCache.java"/>
<file line="37" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/cache/decorators/WeakCache.java"/>
<codefragment>
<![CDATA[
  public SoftCache(Cache delegate) {
    this.delegate = delegate;
    this.numberOfHardLinks = 256;
    this.hardLinksToAvoidGarbageCollection = new LinkedList<Object>();
    this.queueOfGarbageCollectedEntries = new ReferenceQueue<Object>();
  }

  @Override
  public String getId() {
    return delegate.getId();
  }

  @Override
  public int getSize() {
    removeGarbageCollectedItems();
    return delegate.getSize();
  }


  public void setSize(int size) {
    this.numberOfHardLinks = size;
  }

  @Override
  public void putObject(Object key, Object value) {
    removeGarbageCollectedItems();
    delegate.putObject(key, new SoftEntry(key, value, queueOfGarbageCollectedEntries));
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="108">
<file line="30" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/commons/JakartaCommonsLoggingImpl.java"/>
<file line="38" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/log4j2/Log4j2Impl.java"/>
<file line="50" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jImpl.java"/>
<file line="30" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/logging/slf4j/Slf4jLoggerImpl.java"/>
<codefragment>
<![CDATA[
  }

  public boolean isDebugEnabled() {
    return log.isDebugEnabled();
  }

  public boolean isTraceEnabled() {
    return log.isTraceEnabled();
  }

  public void error(String s, Throwable e) {
    log.error(s, e);
  }

  public void error(String s) {
    log.error(s);
  }

  public void debug(String s) {
    log.debug(s);
  }

  public void trace(String s) {
    log.trace(s);
  }

  public void warn(String s) {
    log.warn(s);
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="106">
<file line="136" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/cglib/CglibProxyFactory.java"/>
<file line="138" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/executor/loader/javassist/JavassistProxyFactory.java"/>
<codefragment>
<![CDATA[
              return new CglibSerialStateHolder(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);
            } else {
              return original;
            }
          } else {
            if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {
              if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {
                lazyLoader.loadAll();
              } else if (PropertyNamer.isProperty(methodName)) {
                final String property = PropertyNamer.methodToProperty(methodName);
                if (lazyLoader.hasLoader(property)) {
                  lazyLoader.load(property);
                }
              }
            }
          }
        }
        return methodProxy.invokeSuper(enhanced, args);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="106">
<file line="26" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/type/NStringTypeHandler.java"/>
<file line="26" path="/home/eduardo/git/mybatis-3/target/checkout/src/main/java/org/apache/ibatis/type/StringTypeHandler.java"/>
<codefragment>
<![CDATA[
public class NStringTypeHandler extends BaseTypeHandler<String> {

  @Override
  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType)
      throws SQLException {
//    ps.setNString(i, ((String) parameter));
    ps.setString(i, parameter);
  }

  @Override
  public String getNullableResult(ResultSet rs, String columnName)
      throws SQLException {
//    return rs.getNString(columnName);
    return rs.getString(columnName);
  }

  @Override
  public String getNullableResult(ResultSet rs, int columnIndex)
      throws SQLException {
    return rs.getString(columnIndex);
  }

  @Override
  public String getNullableResult(CallableStatement cs, int columnIndex)
      throws SQLException {
//    return cs.getNString(columnIndex);
    return cs.getString(columnIndex);
  }

}
]]>
</codefragment>
</duplication>
</pmd-cpd>